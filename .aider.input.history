
# 2023-07-15 22:18:56.156478
+Set up the scaffolding for a web app that downloads MP3s from YouTube and saves them to an S3 bucket. Work in the current directory. The app will be written using yarn, Node.js v20, and TypeScript. It will be deployed as a docker image. It will need to expose a single POST endpoint for receiving the URL. That URL should run an ffmpeg command, which we'll later write together, to download the MP3. After downloading, it will name the MP3 file, write some metadata, and upload it to an S3 bucket. To begin, create the initial scaffolding for the app (packages, file structure, etc).

# 2023-07-15 22:21:05.330313
+add a healthcheck endpoint to the express app

# 2023-07-15 22:25:07.016671
+add the @types/express package to the project

# 2023-07-15 22:25:52.477427
+/run yarn install

# 2023-07-15 22:30:10.066529
+remove these packages: ffmpeg-static, fluent-ffmpeg, ytdl-core

# 2023-07-15 22:30:34.277233
+/run yarn

# 2023-07-15 22:30:55.300545
+install yt-dlp on the system as part of the docker image setup

# 2023-07-15 22:32:47.429445
+log the yt-dlp version after installation in the dockerfile so we can verify from the logs that it's installed

# 2023-07-15 22:33:31.068754
+add a "deploy" script to package.json that runs "fly deploy"

# 2023-07-15 22:34:07.827612
+/run yarn deploy

# 2023-07-15 22:43:29.639214
+write an async function that executes `yt-dlp` with a URL. use these settings: `-f "bestaudio/best" -x --audio-format mp3 --add-metadata`. it should wait for the command to finish executing and then confirm that the file exists. if the file exists, return "OK". if it does not, log the error and return "ERROR".

# 2023-07-15 22:45:04.398636
+extract the yt-dlp execution code into a function so we can write a test for it without needing to start the express server. do not write the test yet, just move the code into a function.

# 2023-07-15 22:45:29.966655
+/clear

# 2023-07-15 22:45:33.520435
+extract the yt-dlp execution code into a function so we can write a test for it without needing to start the express server. do not write the test yet, just move the code into a function.

# 2023-07-15 22:46:15.365138
+write a test for the downloadFromYoutube function

# 2023-07-15 22:48:13.426053
+/run yarn

# 2023-07-15 22:48:44.411846
+add the necessary packages to run the jest tests

# 2023-07-15 22:48:56.638348
+/run yarn

# 2023-07-15 22:49:32.883323
+/run yarn test

# 2023-07-15 22:49:51.349918
+/clear

# 2023-07-15 22:49:53.139829
+/run yarn test

# 2023-07-15 22:51:41.435244
+/clear

# 2023-07-15 22:52:25.172942
+remove the "should call the callback with an error if exec fails" test

# 2023-07-15 22:52:51.984922
+use this URL as the test video url: https://www.youtube.com/watch?v=C0DPdy98e4c

# 2023-07-15 22:56:01.126656
+/run yarn test

# 2023-07-15 22:56:34.204180
+/clear

# 2023-07-15 22:57:55.370377
+move the `downloadFromYoutube` function to its own file so importing it in the tests doesn't start the express server.

# 2023-07-15 23:00:02.042889
+the tests aren't waiting until yt-dlp completes and they're finishing too early, how can we fix this?

# 2023-07-15 23:01:13.997312
+/clear

# 2023-07-15 23:01:15.609540
+/run yarn test

# 2023-07-15 23:01:54.345456
+await `downloadFromYoutube` in all of the tests since it's now a promise

# 2023-07-15 23:02:14.126160
+/run yarn test

# 2023-07-15 23:02:28.004102
+/clear

# 2023-07-15 23:03:12.894615
+update the jest timeout to be 60s

# 2023-07-15 23:17:19.784454
+create a new file that runs `downloadFromYoutube` by itself with the test url. add a script called "run" that runs the file.

# 2023-07-15 23:18:35.867088
+rename the "run" command to "dl"

# 2023-07-15 23:19:14.425696
+remove line 22 from index.test.ts

# 2023-07-15 23:19:52.453268
+/undo

# 2023-07-15 23:21:15.451098
+/add src/index.test.ts

# 2023-07-15 23:21:38.090487
+in the only test in the test file, remove the file after the test finishes

# 2023-07-15 23:25:15.035544
+/clear

# 2023-07-15 23:25:32.764698
+update the `downloadFromYoutube` function to use the video title from youtube as the filename, with .mp3 at the end.

# 2023-07-15 23:26:33.046468
+remove the unused filename attribute from `downloadFromYoutube`

# 2023-07-15 23:30:48.486948
+replace ".webm" with ".mp3" in outputFilename

# 2023-07-15 23:31:19.654756
+/clear

# 2023-07-15 23:31:36.904413
+update downloadFromYoutube to return an object with a boolean `success` property and a `filename` string property

# 2023-07-15 23:32:28.762488
+update the runDownload file with the new response format for the downloadFromYoutube function

# 2023-07-15 23:33:04.357192
+update src/runDownload.ts to remove the file after it downloads, and to throw an error if the file is not found

# 2023-07-15 23:34:03.039249
+remove index.test.ts and rename the "dl" script to "test"

# 2023-07-15 23:34:41.047368
+remove the packages related to jest

# 2023-07-15 23:36:51.122861
+/commit

# 2023-07-15 23:37:34.302867
+install the dotenv package. create a .env file and add it to .gitignore.

# 2023-07-15 23:38:24.499186
+/commit

# 2023-07-15 23:38:44.547556
+/clear

# 2023-07-15 23:38:47.221544
+/add src/youtube.ts

# 2023-07-15 23:39:13.413335
+add a second function to youtube.ts that uploads the mp3 to an S3 bucket

# 2023-07-15 23:39:50.034450
+create a new file, upload.ts, with a function that receives a filename and uploads that file to an S3 bucket.

# 2023-07-15 23:40:36.119973
+update upload.ts with S3 credentials. use ACCESS_KEY_ID and ACCESS_KEY_SECRET and BUCKET_NAME from process.env.

# 2023-07-15 23:41:08.685888
+/run tsc

# 2023-07-15 23:41:15.893048
+/run yarn tsc

# 2023-07-15 23:41:39.635870
+/add src/upload.ts

# 2023-07-15 23:43:55.535054
+update upload.ts to upload the file to a folder called "dj-set-downloader" in the bucket

# 2023-07-15 23:46:01.137875
+/commit

# 2023-07-15 23:46:22.048355
+update the downloadFromYoutube function to upload the file after the download finishes, and then delete the downloaded file after the upload completes.

# 2023-07-15 23:46:41.810290
+/add src/youtube.ts

# 2023-07-15 23:47:26.338471
+/commit

# 2023-07-15 23:48:10.841841
+/run yarn tsc

# 2023-07-15 23:49:12.159263
+add some logging to downloadFromYoutube and uploadToS3 so we can see what's happening as we run the command

# 2023-07-15 23:49:55.058767
+/commit

# 2023-07-15 23:50:27.505774
+/add src/test.ts

# 2023-07-15 23:50:29.491420
+/commit

# 2023-07-15 23:52:09.540218
+add a license field to package.json

# 2023-07-15 23:52:58.723555
+/commit

# 2023-07-16 00:08:53.827240
+/run npx aws-sdk-js-codemod -t v2-to-v3 src/upload.ts

# 2023-07-16 00:09:48.856325
+remove aws-sdk, add @aws-sdk/client-s3 and @aws-sdk/lib-storage

# 2023-07-16 00:10:11.293215
+/run yarn

# 2023-07-16 00:13:48.215094
+/commit

# 2023-07-16 00:20:55.548949
+/undo

# 2023-07-16 00:21:02.272515
+add bodyParser to src/index.ts

# 2023-07-16 00:21:15.649431
+/add src/index.ts

# 2023-07-16 00:22:07.301622
+add bodyParser.urlencoded

# 2023-07-16 00:26:06.984275
+change the post endpoint from "/" to "/download"

# 2023-07-16 00:26:32.106940
+/undo

# 2023-07-16 00:27:21.822497
+add an endpoint that queries all the files in the S3 bucket under the `dj-sets` key and returns a list of filesnames as an html table.

# 2023-07-16 00:28:04.026344
+/undo

# 2023-07-16 00:28:08.583422
+/clear

# 2023-07-16 00:28:39.936696
+add an endpoint that queries all the files in the S3 bucket under the `dj-sets` key and returns a list of filesnames as an html table.

# 2023-07-16 00:31:54.013182
+/run yarn tsc

# 2023-07-16 00:34:23.695838
+/commit

# 2023-07-16 00:34:34.897228
+update the /files endpoint to return a "no files" message if the response is empty.

# 2023-07-16 00:52:06.512517
+install ffmpeg as part of the setup in dockerfile

# 2023-07-16 01:20:18.763549
+I want to move the async downloadFromYoutube out of the POST endpoint so the POST endpoint can immediately return while the download is queued up. What is the most simple way to do this?

# 2023-07-16 01:26:31.338156
+/undo

# 2023-07-16 04:16:03.152733
+/add src/index.ts

# 2023-07-16 04:16:08.023397
+/add src/*

# 2023-07-16 04:16:30.475042
+in src/index.ts, implement a simple in-memory queue so the POST request can quickly return instead of waiting for `downloadFromYoutube` to complete.

# 2023-07-16 04:17:20.904244
+/run yarn tsc

# 2023-07-16 04:18:00.806097
+add a "dev" script that runs `tsc watch src/index.ts`

# 2023-07-16 04:18:25.679495
+add a "dev" script that runs `tsx watch src/index.ts`

# 2023-07-16 04:19:01.634301
+/add package.json

# 2023-07-16 04:24:28.526328
+/commit

# 2023-07-16 05:38:17.871888
+add src/index.ts

# 2023-07-16 05:38:22.561776
+/add src/index.ts

# 2023-07-16 05:38:53.673344
+every 30 seconds, index.ts should check if isDownloading is false AND downloadQueue is empty, and if both are true, should call process.exit(0).

# 2023-07-16 05:40:03.212417
+/commit

# 2023-07-16 05:41:50.622888
+exit
